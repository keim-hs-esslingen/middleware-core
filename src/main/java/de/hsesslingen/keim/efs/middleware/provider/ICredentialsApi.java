/*
 * MIT License
 * 
 * Copyright (c) 2020 Hochschule Esslingen
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE. 
 */
package de.hsesslingen.keim.efs.middleware.provider;

import de.hsesslingen.keim.efs.middleware.provider.credentials.TokenCredentials;
import de.hsesslingen.keim.efs.mobility.service.MobilityService;
import de.hsesslingen.keim.efs.mobility.requests.MiddlewareRequest;
import static de.hsesslingen.keim.efs.mobility.requests.MiddlewareRequest.SECRET_HEADER;
import static de.hsesslingen.keim.efs.mobility.requests.MiddlewareRequest.TOKEN_HEADER;
import static de.hsesslingen.keim.efs.mobility.requests.MiddlewareRequest.USER_ID_HEADER;
import de.hsesslingen.keim.efs.mobility.requests.MiddlewareRequestTemplate;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import java.util.Map;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;

/**
 * API for creating and managing tokens in a generic way, that is comptaible to
 * many use cases. It allows generation and deletion of tokens based on
 * permanent credentials as well as checking the validity of such tokens.
 * <p>
 * <h3>Further details:</h3>
 * <ul>
 * <li>See {@link ICredentialsApi#createToken(String, String)} for details on
 * how to create token.
 * <li>See {@link ICredentialsApi#deleteToken(String)} for details on how to
 * delete (invalidate) tokens.
 * <li>See {@link ICredentialsApi#isTokenValid(String)} for details on how to
 * check the validity of tokens.
 * </ul>
 * <p>
 * <h3>Additional note:</h3>
 * This interface also provides static methods for building HTTP requests, that
 * match the endpoints defined in it. They are build upon the
 * {@link MiddlewareRequest} class.
 *
 * @author keim
 */
@RequestMapping(value = "/api", produces = MediaType.APPLICATION_JSON_VALUE)
public interface ICredentialsApi {

    public static final String TOKEN_PATH = "/credentials/token";
    public static final String USERS_PATH = "/credentials/users";

    public static final String USER_ID_DESCRIPTION = "A string value that uniquely identifies a user. (e.g. an email adress, a username, ...)";
    public static final String SECRET_DESCRIPTION = "The secret that authenticates a user. Use this value if there is only one secret relevant, e.g. simple password.";
    public static final String CREDENTIALS_DESCRIPTION = "A map of credential values that are needed for authentication. Use this value if there are multiple secrets needed for authentication, e.g. Two-Factor-Auth.";
    public static final String TOKEN_DESCRIPTION = "A token that identifies and authenticates a user, sometimes with a limited duration of validity.";

    /**
     * Allows creation of tokens based on the given user-id and secret.The
     * format of the tokens is intentionally not defined. They represent some
     * chunk of data in the form of a string, that is generated by a mobility
     * service provider and also recognized by it. Tokens are used to identify
     * <em>and</em> authenticate users, very similar to how session tokens are
     * used all over the web.
     * <p>
     * To create a token you need a user-id (e.g. username or email), which
     * represents the users ID at the particular mobility service provider, and
     * the corresponding secret (e.g. password), that is needed for
     * authentication and authorication to obtain a token. The token is
     * generated by the provider and returned to the caller, which can use this
     * token in subsequent requests to any EFS-API until its validity has
     * expired.
     *
     * @param userId A string value that uniquely identifies a user. (e.g. an
     * email adress, a username, ...). This value can be left out if applicable
     * at the particular mobility service provider.
     * @param secret The secret that authenticates the user with the given
     * {@link userId} or identifies <em>and</em> authenticates the user at the
     * same time, if not {@link userId} is applicable for this mobility service
     * provider. Either this or {@link credentials} provides the essential
     * authenticating piece of information. Can be {@code null} if
     * {@link credentials} is provided.
     * @param credentials A collection of secrets needed for authentication. Can
     * be {@code null}, if {@link secret} is provided.
     * @return An instance of TokenCredentials that contains a provider specific
     * token, which can be used as is.
     */
    @PostMapping(TOKEN_PATH)
    @ResponseStatus(HttpStatus.OK)
    @ApiOperation(value = "Create tokens.", notes = "Allows creation of tokens based on the given user-id, secret and credentials. The content of this token is provider specific and can be used as is. Either secret or credentials must be provided.")
    public TokenCredentials createToken(
            @ApiParam(USER_ID_DESCRIPTION)
            @RequestHeader(name = USER_ID_HEADER, required = false) String userId,
            //
            @ApiParam(SECRET_DESCRIPTION)
            @RequestHeader(name = SECRET_HEADER, required = false) String secret,
            //
            @ApiParam(CREDENTIALS_DESCRIPTION)
            @RequestBody(required = false) Map<String, String> credentials
    );

    /**
     * Invalidates (e.g. logs out) the given token.
     *
     * @param token A token that identifies and authenticates a user, sometimes
     * with a limited duration of validity.
     */
    @DeleteMapping(TOKEN_PATH)
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @ApiOperation(value = "Invalidate tokens.", notes = "Invalidates (e.g. logs out) the given token.")
    public void deleteToken(
            @RequestHeader(name = TOKEN_HEADER) @ApiParam(TOKEN_DESCRIPTION) String token
    );

    /**
     * This endpoint can be used to check whether the given token is still
     * valid. If the token is valid, "true" should be returned, if invalid,
     * "false" should be returned.
     *
     * @param token A token that identifies and authenticates a user, sometimes
     * with a limited duration of validity.
     * @return true if valid, false if not.
     */
    @GetMapping(TOKEN_PATH)
    @ResponseStatus(HttpStatus.OK)
    @ApiOperation(value = "Check validity of credentials.", notes = "Checks whether the given token is still valid.")
    public boolean isTokenValid(
            @RequestHeader(name = TOKEN_HEADER) @ApiParam(TOKEN_DESCRIPTION) String token
    );

    /**
     * Assembles a request, matching the {@code POST /credentials/token}
     * endpoint, for the service with the given url using the given token. See
     * {@link ICredentialsApi#createToken(String, String)} for JavaDoc on that
     * endpoint.
     * <p>
     * The returned request can be sent using {@code request.go()} which will
     * return a {@link ResponseEntity}.
     *
     * @param serviceUrl The base url of the mobility service that should be
     * queried. Use {@link MobilityService#getServiceUrl()} to get this url.
     * @param userId A string value that uniquely identifies a user. (e.g. an
     * email adress, a username, ...). This value can be left out if applicable
     * at the particular mobility service provider.
     * @param secret The secret that authenticates the user with the given
     * {@link userId} or identifies <em>and</em> authenticates the user at the
     * same time, if not {@link userId} is applicable for this mobility service
     * provider. In every case this value is the authenticating piece of
     * information and therefore it is required.
     * @param requestTemplate The template that should be used as foundation for
     * building the request.
     * @return
     */
    public static MiddlewareRequest<TokenCredentials> buildCreateTokenRequest(
            String serviceUrl,
            String userId,
            String secret,
            MiddlewareRequestTemplate requestTemplate
    ) {
        return requestTemplate.post(serviceUrl + TOKEN_PATH)
                .expect(TokenCredentials.class)
                .userIdAndSecret(userId, secret);
    }

    /**
     * Assembles a request, matching the {@code POST /credentials/token}
     * endpoint, for the service with the given url using the given token.See
     * {@link ICredentialsApi#createToken(String, String)} for JavaDoc on that
     * endpoint.<p>
     * The returned request can be sent using {@code request.go()} which will
     * return a {@link ResponseEntity}.
     *
     * @param serviceUrl The base url of the mobility service that should be
     * queried. Use {@link MobilityService#getServiceUrl()} to get this url.
     * @param userId A string value that uniquely identifies a user. (e.g. an
     * email adress, a username, ...). This value can be left out if applicable
     * at the particular mobility service provider.
     * @param credentials A collection of secrets needed for authentication.
     * @param requestTemplate The template that should be used as foundation for
     * building the request.
     * @return
     */
    public static MiddlewareRequest<TokenCredentials> buildCreateTokenRequest(
            String serviceUrl,
            String userId,
            Map<String, String> credentials,
            MiddlewareRequestTemplate requestTemplate
    ) {
        return requestTemplate.post(serviceUrl + TOKEN_PATH)
                .expect(TokenCredentials.class)
                .userId(userId)
                .body(credentials);
    }

    /**
     * Assembles a request, matching the {@code DELETE /credentials/token}
     * endpoint, for the service with the given url using the given token. See
     * {@link ICredentialsApi#deleteToken(String)} for JavaDoc on that endpoint.
     * <p>
     * The returned request can be sent using {@code request.go()} which will
     * return a {@link ResponseEntity}.
     *
     * @param serviceUrl The base url of the mobility service that should be
     * queried. Use {@link MobilityService#getServiceUrl()} to get this url.
     * @param token The token which should be invalidated.
     * @param requestTemplate The template that should be used as foundation for
     * building the request.
     * @return
     */
    public static MiddlewareRequest<Void> buildDeleteTokenRequest(
            String serviceUrl,
            String token,
            MiddlewareRequestTemplate requestTemplate
    ) {
        return requestTemplate.delete(serviceUrl + TOKEN_PATH)
                .expect(Void.class)
                .token(token);
    }

    /**
     * Assembles a request, matching the {@code GET /credentials/token}
     * endpoint, for the service with the given url using the given token. See
     * {@link ICredentialsApi#isTokenValid(String)} for JavaDoc on that
     * endpoint.
     * <p>
     * The returned request can be sent using {@code request.go()} which will
     * return a {@link ResponseEntity}.
     *
     * @param serviceUrl The base url of the mobility service that should be
     * queried. Use {@link MobilityService#getServiceUrl()} to get this url.
     * @param token The token which should be invalidated.
     * @param requestTemplate The template that should be used as foundation for
     * building the request.
     * @return
     */
    public static MiddlewareRequest<Boolean> buildIsTokenValidRequest(
            String serviceUrl,
            String token,
            MiddlewareRequestTemplate requestTemplate
    ) {
        return requestTemplate.get(serviceUrl + TOKEN_PATH)
                .expect(Boolean.class)
                .token(token);
    }

}
